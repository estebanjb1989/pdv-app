{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _component = require(\"../../component\");\n\nvar _hook = require(\"../../hook\");\n\nvar DocumentPicker = _interopRequireWildcard(require(\"expo-document-picker\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Ajustes = function Ajustes() {\n  return (0, _jsxRuntime.jsx)(_component.Container, {\n    children: (0, _jsxRuntime.jsx)(_component.Button.Primary, {\n      onPress: function onPress() {\n        DocumentPicker.getDocumentAsync({\n          type: 'xls'\n        });\n      },\n      title: \"Importar Excel\"\n    })\n  });\n};\n\nvar _default = Ajustes;\nexports.default = _default;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/with-electron/views/Ajustes/index.js"],"names":["Ajustes","DocumentPicker","type"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,OAAO,GAAPA,SAAAA,OAAAA,GAAgB;AAClB,SACI,qBAAA,oBAAA,EAAA;AAAA,IAAA,QAAA,EACI,qBAAA,kBAAA,OAAA,EAAA;AACI,MAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACXC,QAAAA,cAAc,CAAdA,gBAAAA,CAAgC;AAC5BC,UAAAA,IAAI,EADRD;AAAgC,SAAhCA;AAFR,OAAA;AAMI,MAAA,KAAK,EARjB;AAEQ,KAAA;AADJ,GAAA,CADJ;AADJ,CAAA;;eAeA,O","sourcesContent":["import React from 'react';\nimport { Container, Button } from '../../component'\nimport { useBackButton } from '../../hook'\nimport * as DocumentPicker from 'expo-document-picker'\n\nconst Ajustes = () => {\n    return (\n        <Container>\n            <Button.Primary\n                onPress={() => {\n                    DocumentPicker.getDocumentAsync({\n                        type: 'xls'\n                    })\n                }}\n                title=\"Importar Excel\"\n            />\n        </Container>\n    );\n}\n\nexport default Ajustes"]},"metadata":{},"sourceType":"script"}