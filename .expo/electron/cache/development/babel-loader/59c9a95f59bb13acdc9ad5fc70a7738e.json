{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Container = _interopRequireDefault(require(\"../Container\"));\n\nvar _Text = _interopRequireDefault(require(\"../Text\"));\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _colors = _interopRequireDefault(require(\"../../constants/colors\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ButtonToggle = function ButtonToggle(_ref) {\n  var selectedOption = _ref.selectedOption,\n      options = _ref.options,\n      onChange = _ref.onChange,\n      overlap = _ref.overlap;\n\n  var _useState = (0, _react.useState)(selectedOption),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  return (0, _jsxRuntime.jsx)(_Container.default, {\n    row: true,\n    fullWidth: true,\n    justifyCenter: true,\n    children: options.map(function (opt) {\n      return (0, _jsxRuntime.jsx)(_Container.default, {\n        onPress: !opt.disabled ? function () {\n          setSelected(opt);\n          onChange(opt);\n        } : null,\n        style: [_styles.default.toggle, overlap && _styles.default.overlap, (selected === null || selected === void 0 ? void 0 : selected.slug) === opt.slug && _styles.default.selected],\n        children: (0, _jsxRuntime.jsx)(_Text.default.Body, {\n          color: (selected === null || selected === void 0 ? void 0 : selected.slug) === opt.slug ? _colors.default.text : _colors.default.primary,\n          children: opt.name\n        })\n      }, opt.slug);\n    })\n  });\n};\n\nButtonToggle.propTypes = {\n  selectedOption: _propTypes.default.shape({}),\n  options: _propTypes.default.arrayOf(_propTypes.default.shape()).isRequired,\n  onChange: _propTypes.default.func.isRequired,\n  overlap: _propTypes.default.bool\n};\nButtonToggle.defaultProps = {\n  selectedOption: null,\n  overlap: false\n};\nvar _default = ButtonToggle;\nexports.default = _default;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/with-electron/component/ButtonToggle/ButtonToggle.js"],"names":["ButtonToggle","selectedOption","options","onChange","overlap","selected","setSelected","useState","opt","styles","colors","PropTypes"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,YAAY,GAAZA,SAAAA,YAAAA,CAAe,IAAfA,EAAmE;AAAjDC,MAAAA,cAAiD,GAAA,IAAA,CAAjDA,cAAAA;AAAAA,MAAgBC,OAAiC,GAAA,IAAA,CAAjCA,OAAhBD;AAAAA,MAAyBE,QAAwB,GAAA,IAAA,CAAxBA,QAAzBF;AAAAA,MAAmCG,OAAc,GAAA,IAAA,CAAdA,OAAnCH;;AACtB,MAAA,SAAA,GAAgCM,qBAAhC,cAAgCA,CAAhC;AAAA,MAAA,UAAA,GAAA,6BAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOF,QAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAiBC,WAAjB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEA,SACE,qBAAA,kBAAA,EAAA;AAAW,IAAA,GAAG,EAAd,IAAA;AAAe,IAAA,SAAS,EAAxB,IAAA;AAAyB,IAAA,aAAa,EAAtC,IAAA;AAAA,IAAA,QAAA,EACGJ,OAAO,CAAPA,GAAAA,CAAY,UAAA,GAAA,EAAA;AAAA,aACX,qBAAA,kBAAA,EAAA;AAEE,QAAA,OAAO,EACL,CAACM,GAAG,CAAJ,QAAA,GACI,YAAM;AACJF,UAAAA,WAAW,CAAXA,GAAW,CAAXA;AACAH,UAAAA,QAAQ,CAARA,GAAQ,CAARA;AAHN,SAAA,GAHJ,IAAA;AAUE,QAAA,KAAK,EAAE,CACLM,gBADK,MAAA,EAELL,OAAO,IAAIK,gBAFN,OAAA,EAGL,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAA,KAAR,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAR,IAAA,MAAmBD,GAAG,CAAtB,IAAA,IAA+BC,gBAbnC,QAUS,CAVT;AAAA,QAAA,QAAA,EAgBE,qBAAA,cAAA,IAAA,EAAA;AACE,UAAA,KAAK,EACH,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAA,KAAR,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAR,IAAA,MAAmBD,GAAG,CAAtB,IAAA,GAA8BE,gBAA9B,IAAA,GAA4CA,gBAFhD,OAAA;AAAA,UAAA,QAAA,EAKGF,GAAG,CArBR;AAgBE,SAAA;AAhBF,OAAA,EACOA,GAAG,CAFC,IACX,CADW;AAFjB,KAEKN;AADH,GAAA,CADF;AAHF,CAAA;;AAmCAF,YAAY,CAAZA,SAAAA,GAAyB;AACvBC,EAAAA,cAAc,EAAEU,mBAAAA,KAAAA,CADO,EACPA,CADO;AAEvBT,EAAAA,OAAO,EAAES,mBAAAA,OAAAA,CAAkBA,mBAAlBA,KAAkBA,EAAlBA,EAFc,UAAA;AAGvBR,EAAAA,QAAQ,EAAEQ,mBAAAA,IAAAA,CAHa,UAAA;AAIvBP,EAAAA,OAAO,EAAEO,mBAJXX;AAAyB,CAAzBA;AAOAA,YAAY,CAAZA,YAAAA,GAA4B;AAC1BC,EAAAA,cAAc,EADY,IAAA;AAE1BG,EAAAA,OAAO,EAFTJ;AAA4B,CAA5BA;eAKA,Y","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Container from '../Container'\nimport Text from '../Text'\nimport styles from \"./styles\";\nimport colors from \"../../constants/colors\";\n\nconst ButtonToggle = ({ selectedOption, options, onChange, overlap }) => {\n  const [selected, setSelected] = useState(selectedOption);\n\n  return (\n    <Container row fullWidth justifyCenter>\n      {options.map((opt) => (\n        <Container\n          key={opt.slug}\n          onPress={\n            !opt.disabled\n              ? () => {\n                  setSelected(opt);\n                  onChange(opt);\n                }\n              : null\n          }\n          style={[\n            styles.toggle,\n            overlap && styles.overlap,\n            selected?.slug === opt.slug && styles.selected,\n          ]}\n        >\n          <Text.Body\n            color={\n              selected?.slug === opt.slug ? colors.text : colors.primary\n            }\n          >\n            {opt.name}\n          </Text.Body>\n        </Container>\n      ))}\n    </Container>\n  );\n};\n\nButtonToggle.propTypes = {\n  selectedOption: PropTypes.shape({}),\n  options: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  onChange: PropTypes.func.isRequired,\n  overlap: PropTypes.bool,\n};\n\nButtonToggle.defaultProps = {\n  selectedOption: null,\n  overlap: false,\n};\n\nexport default ButtonToggle;\n"]},"metadata":{},"sourceType":"script"}