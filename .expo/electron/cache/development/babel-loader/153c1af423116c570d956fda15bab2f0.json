{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = exports.initialState = exports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"redux/types\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar initialState = {\n  credentials: null,\n  userData: null,\n  tokenData: null,\n  tokenRefreshData: null,\n  languageSelected: {\n    slug: 'en'\n  },\n  plaid: {},\n  eligibles: {},\n  userPhone: null,\n  wellnessScore: null,\n  bankInfo: null,\n  bankAccountSelected: null,\n  transactions: null\n};\nexports.initialState = initialState;\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var nextState = null;\n\n  switch (action.type) {\n    case _types.SessionTypes.UPDATE_USER_PHONE:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          userPhone: action.payload.phone\n        });\n        break;\n      }\n\n    case _types.SessionTypes.UPDATE_WELLNESS_SCORE:\n      {\n        var keys = Object.keys(action.payload);\n        var score = keys.map(function (key) {\n          return action.payload[key];\n        }).reduce(function (carry, value) {\n          return carry + value.weight;\n        }, 0) * 100 / (keys.length * 10);\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          wellnessScore: parseInt(score)\n        });\n        break;\n      }\n\n    case _types.SessionTypes.UPDATE_BANK_INFO:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          bankInfo: action.payload\n        });\n        break;\n      }\n\n    case _types.SessionTypes.UPDATE_BANK_ACCOUNT_SELECTED:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          bankAccountSelected: action.payload\n        });\n        break;\n      }\n\n    case _types.SessionTypes.UPDATE_LANGUAGE_SELECTED:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          languageSelected: action.payload\n        });\n        break;\n      }\n\n    case _types.AuthTypes.GET_USER_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          userData: action.payload\n        });\n        break;\n      }\n\n    case _types.AuthTypes.LOGIN_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          credentials: action.payload\n        });\n        break;\n      }\n\n    case _types.AuthTypes.LOGIN_ERROR:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          credentials: null\n        });\n        break;\n      }\n\n    case _types.TokenTypes.TOKEN_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          tokenData: action.payload\n        });\n        break;\n      }\n\n    case _types.TokenTypes.TOKEN_ERROR:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          tokenData: null\n        });\n        break;\n      }\n\n    case _types.AuthTypes.TOKEN_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          tokenData: action.payload\n        });\n        break;\n      }\n\n    case _types.AuthTypes.CONVERT_TOKEN_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          tokenData: action.payload\n        });\n        break;\n      }\n\n    case _types.AuthTypes.TOKEN_ERROR:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          tokenData: null\n        });\n        break;\n      }\n\n    case _types.PlaidTypes.TOKEN_EXCHANGE_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          plaid: _objectSpread(_objectSpread({}, state.plaid), {}, {\n            tokenExchange: action.payload\n          })\n        });\n        break;\n      }\n\n    case _types.PlaidTypes.TRANSACTIONS_GET_SUCCESS:\n      {\n        var _action$payload;\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          plaid: _objectSpread(_objectSpread({}, state.plaid), {}, {\n            transactions: (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.results\n          })\n        });\n      }\n\n    case _types.PlaidTypes.DELETE_ITEM_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          plaid: {}\n        });\n      }\n\n    case _types.PlaidTypes.DELETE_ITEM_ERROR:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          plaid: {}\n        });\n      }\n\n    case _types.AuthTypes.LOGOUT_SUCCESS:\n      {\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          credentials: null,\n          tokenData: null,\n          plaid: {}\n        });\n        break;\n      }\n\n    case _types.BenefitsTypes.GET_ELIGIBLES_SUCCESS:\n      {\n        var _action$payload2;\n\n        nextState = _objectSpread(_objectSpread({}, state), {}, {\n          benefits: {\n            eligibles: (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.results\n          }\n        });\n        break;\n      }\n\n    default:\n      nextState = state;\n  }\n\n  return nextState;\n};\n\nexports.reducer = reducer;\n\nvar changeLanguage = function changeLanguage(payload) {\n  return function (dispatch) {\n    dispatch({\n      type: _types.SessionTypes.UPDATE_LANGUAGE_SELECTED,\n      payload: payload\n    });\n    dispatch({\n      type: _types.BottomSheetTypes.TOGGLE\n    });\n  };\n};\n\nvar _default = {\n  changeLanguage: changeLanguage\n};\nexports.default = _default;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/pdv-app/redux/modules/session.js"],"names":["initialState","credentials","userData","tokenData","tokenRefreshData","languageSelected","slug","plaid","eligibles","userPhone","wellnessScore","bankInfo","bankAccountSelected","transactions","reducer","state","action","nextState","SessionTypes","keys","Object","score","carry","value","parseInt","AuthTypes","TokenTypes","PlaidTypes","tokenExchange","BenefitsTypes","benefits","changeLanguage","dispatch","type","payload","BottomSheetTypes"],"mappings":"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","sourcesContent":["/*\n *  Persisted\n */\nimport {\n  AuthTypes,\n  BenefitsTypes,\n  BottomSheetTypes,\n  SessionTypes,\n  TokenTypes,\n  PlaidTypes,\n} from 'redux/types'\n\nexport const initialState = {\n  credentials: null,\n  userData: null,\n  tokenData: null,\n  tokenRefreshData: null,\n  languageSelected: {\n    slug: 'en',\n  },\n  plaid: {},\n  eligibles: {},\n  userPhone: null,\n  wellnessScore: null,\n  bankInfo: null,\n  bankAccountSelected: null,\n  transactions: null,\n}\n\nexport const reducer = (state = initialState, action = {}) => {\n  let nextState = null\n\n  switch (action.type) {\n    case SessionTypes.UPDATE_USER_PHONE: {\n      nextState = {\n        ...state,\n        userPhone: action.payload.phone,\n      }\n      break\n    }\n    case SessionTypes.UPDATE_WELLNESS_SCORE: {\n      const keys = Object.keys(action.payload)\n      const score =\n        (keys\n          .map((key) => action.payload[key])\n          .reduce((carry, value) => carry + value.weight, 0) *\n          100) /\n        (keys.length * 10)\n\n      nextState = {\n        ...state,\n        wellnessScore: parseInt(score),\n      }\n      break\n    }\n\n    case SessionTypes.UPDATE_BANK_INFO: {\n      nextState = {\n        ...state,\n        bankInfo: action.payload,\n      }\n      break\n    }\n\n    case SessionTypes.UPDATE_BANK_ACCOUNT_SELECTED: {\n      nextState = {\n        ...state,\n        bankAccountSelected: action.payload,\n      }\n      break\n    }\n\n    case SessionTypes.UPDATE_LANGUAGE_SELECTED: {\n      nextState = {\n        ...state,\n        languageSelected: action.payload,\n      }\n      break\n    }\n\n    case AuthTypes.GET_USER_SUCCESS: {\n      nextState = {\n        ...state,\n        userData: action.payload,\n      }\n      break\n    }\n\n    case AuthTypes.LOGIN_SUCCESS: {\n      nextState = {\n        ...state,\n        credentials: action.payload,\n      }\n      break\n    }\n\n    case AuthTypes.LOGIN_ERROR: {\n      nextState = {\n        ...state,\n        credentials: null,\n      }\n      break\n    }\n\n    case TokenTypes.TOKEN_SUCCESS: {\n      nextState = {\n        ...state,\n        tokenData: action.payload,\n      }\n      break\n    }\n\n    case TokenTypes.TOKEN_ERROR: {\n      nextState = {\n        ...state,\n        tokenData: null,\n      }\n      break\n    }\n\n    case AuthTypes.TOKEN_SUCCESS: {\n      nextState = {\n        ...state,\n        tokenData: action.payload,\n      }\n      break\n    }\n\n    case AuthTypes.CONVERT_TOKEN_SUCCESS: {\n      nextState = {\n        ...state,\n        tokenData: action.payload,\n      }\n      break\n    }\n\n    case AuthTypes.TOKEN_ERROR: {\n      nextState = {\n        ...state,\n        tokenData: null,\n      }\n      break\n    }\n\n    case PlaidTypes.TOKEN_EXCHANGE_SUCCESS: {\n      nextState = {\n        ...state,\n        plaid: {\n          ...state.plaid,\n          tokenExchange: action.payload,\n        },\n      }\n      break\n    }\n\n    case PlaidTypes.TRANSACTIONS_GET_SUCCESS: {\n      return {\n        ...state,\n        plaid: {\n          ...state.plaid,\n          transactions: action.payload?.results,\n        },\n      }\n    }\n\n    case PlaidTypes.DELETE_ITEM_SUCCESS: {\n      return {\n        ...state,\n        plaid: {},\n      }\n    }\n\n    case PlaidTypes.DELETE_ITEM_ERROR: {\n      return {\n        ...state,\n        plaid: {},\n      }\n    }\n\n    case AuthTypes.LOGOUT_SUCCESS: {\n      nextState = {\n        ...state,\n        credentials: null,\n        tokenData: null,\n        plaid: {},\n      }\n      break\n    }\n\n    case BenefitsTypes.GET_ELIGIBLES_SUCCESS: {\n      nextState = {\n        ...state,\n        benefits: {\n          eligibles: action.payload?.results,\n        },\n      }\n      break\n    }\n\n    default:\n      nextState = state\n  }\n\n  return nextState\n}\n\nconst changeLanguage = (payload) => (dispatch) => {\n  dispatch({\n    type: SessionTypes.UPDATE_LANGUAGE_SELECTED,\n    payload,\n  })\n  dispatch({\n    type: BottomSheetTypes.TOGGLE,\n  })\n}\n\nexport default {\n  changeLanguage,\n}\n"]},"metadata":{},"sourceType":"script"}