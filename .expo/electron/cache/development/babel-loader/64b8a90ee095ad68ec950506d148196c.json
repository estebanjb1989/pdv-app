{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _component = require(\"../../component\");\n\nvar _hook = require(\"../../hook\");\n\nvar DocumentPicker = _interopRequireWildcard(require(\"expo-document-picker\"));\n\nvar XLSX = _interopRequireWildcard(require(\"xlsx\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar Adjustments = function Adjustments() {\n  (0, _hook.useBackButton)();\n  return (0, _jsxRuntime.jsxs)(_component.Container, {\n    alignCenter: true,\n    children: [(0, _jsxRuntime.jsx)(_component.Spacer.Medium, {}), (0, _jsxRuntime.jsx)(_component.Button.Primary, {\n      onPress: function _callee() {\n        var f, name, reader;\n        return _regenerator.default.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regenerator.default.awrap(DocumentPicker.getDocumentAsync({\n                  type: 'xls'\n                }));\n\n              case 2:\n                f = _context.sent;\n                name = f.name;\n                reader = new FileReader();\n\n                reader.onload = function (evt) {\n                  var bstr = evt.target.result;\n                  var wb = XLSX.read(bstr, {\n                    type: 'binary'\n                  });\n                  var wsname = wb.SheetNames[0];\n                  var ws = wb.Sheets[wsname];\n                  var data = XLSX.utils.sheet_to_csv(ws, {\n                    header: 1\n                  });\n                  console.log(data);\n                };\n\n                reader.readAsBinaryString(f.output[0]);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      title: \"Importar Productos\"\n    })]\n  });\n};\n\nvar _default = Adjustments;\nexports.default = _default;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/pdv-app/views/Adjustments/index.js"],"names":["Adjustments","useBackButton","f","DocumentPicker","type","name","reader","bstr","evt","wb","XLSX","wsname","ws","data","header","console"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,WAAW,GAAXA,SAAAA,WAAAA,GAAoB;AACtBC;AAEA,SACI,sBAAA,oBAAA,EAAA;AAAW,IAAA,WAAW,EAAtB,IAAA;AAAA,IAAA,QAAA,EAAA,CACI,qBAAA,kBAAA,MAAA,EADJ,EACI,CADJ,EAEI,qBAAA,kBAAA,OAAA,EAAA;AACI,MAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,YAAA,CAAA,EAAA,IAAA,EAAA,MAAA;AAAA,eAAA,qBAAA,KAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,iBAAA,CAAA,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,uBAAA,qBAAA,KAAA,CACWE,cAAc,CAAdA,gBAAAA,CAAgC;AAC5CC,kBAAAA,IAAI,EAFH;AAC2C,iBAAhCD,CADX,CAAA;;AAAA,mBAAA,CAAA;AACCD,gBAAAA,CADD,GAAA,QAAA,CAAA,IACCA;AAIFG,gBAAAA,IALC,GAKMH,CAAC,CALP,IAKDG;AACEC,gBAAAA,MAND,GAMU,IANV,UAMU,EAATA;;AACNA,gBAAAA,MAAM,CAANA,MAAAA,GAAgB,UAAA,GAAA,EAAS;AAErB,sBAAMC,IAAI,GAAGC,GAAG,CAAHA,MAAAA,CAAb,MAAA;AACA,sBAAMC,EAAE,GAAGC,IAAI,CAAJA,IAAAA,CAAAA,IAAAA,EAAgB;AAACN,oBAAAA,IAAI,EAAhC;AAA2B,mBAAhBM,CAAX;AAEA,sBAAMC,MAAM,GAAGF,EAAE,CAAFA,UAAAA,CAAf,CAAeA,CAAf;AACA,sBAAMG,EAAE,GAAGH,EAAE,CAAFA,MAAAA,CAAX,MAAWA,CAAX;AAEA,sBAAMI,IAAI,GAAGH,IAAI,CAAJA,KAAAA,CAAAA,YAAAA,CAAAA,EAAAA,EAA4B;AAACI,oBAAAA,MAAM,EAAhD;AAAyC,mBAA5BJ,CAAb;AAEAK,kBAAAA,OAAO,CAAPA,GAAAA,CAAAA,IAAAA;AAVJT,iBAAAA;;AAYAA,gBAAAA,MAAM,CAANA,kBAAAA,CAA0BJ,CAAC,CAADA,MAAAA,CAA1BI,CAA0BJ,CAA1BI;;AAnBK,mBAAA,CAAA;AAAA,mBAAA,KAAA;AAAA,uBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA;AADb,OAAA;AAsBI,MAAA,KAAK,EAzBjB;AAGQ,KAAA,CAFJ;AAAA,GAAA,CADJ;AAHJ,CAAA;;eAkCA,W","sourcesContent":["import React from 'react';\nimport { Container, Button, Spacer } from '../../component'\nimport { useBackButton } from '../../hook'\nimport * as DocumentPicker from 'expo-document-picker'\nimport * as XLSX from 'xlsx';\n\nconst Adjustments = () => {\n    useBackButton()\n\n    return (\n        <Container alignCenter>\n            <Spacer.Medium />\n            <Button.Primary\n                onPress={async () => {\n                    const f = await DocumentPicker.getDocumentAsync({\n                        type: 'xls'\n                    })\n\n                    var name = f.name;\n                    const reader = new FileReader();\n                    reader.onload = (evt) => { // evt = on_file_select event\n                        /* Parse data */\n                        const bstr = evt.target.result;\n                        const wb = XLSX.read(bstr, {type:'binary'});\n                        /* Get first worksheet */\n                        const wsname = wb.SheetNames[0];\n                        const ws = wb.Sheets[wsname];\n                        /* Convert array of arrays */\n                        const data = XLSX.utils.sheet_to_csv(ws, {header:1});\n                        /* Update state */\n                        console.log(data);\n                    };\n                    reader.readAsBinaryString(f.output[0]);\n                }}\n                title=\"Importar Productos\"\n            />\n        </Container>\n    );\n}\n\nexport default Adjustments"]},"metadata":{},"sourceType":"script"}