{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _component = require(\"component\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _database = require(\"firebase/database\");\n\nvar _screens = _interopRequireDefault(require(\"constants/screens\"));\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar ClusterModelAdd = function ClusterModelAdd() {\n  var navigation = (0, _native.useNavigation)();\n\n  var handlePress = function handlePress() {\n    navigation.navigate(_screens.default.ModelNavigator, {\n      screen: _screens.default.ModelAdd\n    });\n  };\n\n  return (0, _jsxRuntime.jsx)(_component.Container, {\n    padded: true,\n    onPress: handlePress,\n    children: (0, _jsxRuntime.jsx)(_component.Container, {\n      style: _styles.default.newButton,\n      children: (0, _jsxRuntime.jsxs)(_component.Container, {\n        padded: true,\n        row: true,\n        spaceBetween: true,\n        justifyCenter: true,\n        children: [(0, _jsxRuntime.jsx)(_component.Container, {\n          children: (0, _jsxRuntime.jsx)(_component.Text.Body, {\n            color: \"white\",\n            children: \"NUEVO MODELO\"\n          })\n        }), (0, _jsxRuntime.jsx)(_component.Container, {})]\n      })\n    })\n  });\n};\n\nvar Model = function Model() {\n  var _useState = (0, _react.useState)({}),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      models = _useState2[0],\n      setModels = _useState2[1];\n\n  var navigation = (0, _native.useNavigation)();\n  (0, _react.useEffect)(function () {\n    var db = (0, _database.getDatabase)();\n    var path = 'models';\n    var reference = (0, _database.ref)(db, path);\n    (0, _database.onValue)(reference, function (snapshot) {\n      var data = snapshot.val();\n      if (!data) return;\n      setModels(data);\n    });\n  }, []);\n\n  var handlePress = function handlePress(key, model) {\n    return function () {\n      navigation.navigate(_screens.default.ModelNavigator, {\n        screen: _screens.default.ModelAdd,\n        params: {\n          key: key,\n          model: model\n        }\n      });\n    };\n  };\n\n  return (0, _jsxRuntime.jsxs)(_component.Container, {\n    children: [(0, _jsxRuntime.jsx)(ClusterModelAdd, {}), (0, _jsxRuntime.jsx)(_component.Container, {\n      children: Object.keys(models).map(function (key) {\n        return (0, _jsxRuntime.jsx)(_component.Container, {\n          padded: true,\n          onPress: handlePress(key, models[key]),\n          children: (0, _jsxRuntime.jsx)(_component.Container, {\n            children: (0, _jsxRuntime.jsx)(_component.Text.Body, {\n              children: key\n            })\n          })\n        }, key);\n      })\n    })]\n  });\n};\n\nvar _default = Model;\nexports.default = _default;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/with-electron/views/Model/index.js"],"names":["ClusterModelAdd","navigation","handlePress","Screens","screen","styles","Model","models","setModels","useState","useEffect","db","path","reference","dbRef","onValue","data","snapshot","params","key","model","Object"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Text } from 'component'\nimport { useNavigation } from '@react-navigation/native'\nimport { getDatabase, ref as dbRef, onValue } from 'firebase/database';\nimport Screens from 'constants/screens'\nimport styles from './styles';\n\nconst ClusterModelAdd = () => {\n    const navigation = useNavigation()\n\n    const handlePress = () => {\n        navigation.navigate(Screens.ModelNavigator, {\n            screen: Screens.ModelAdd\n        })\n    }\n    return (\n        <Container padded onPress={handlePress}>\n            <Container style={styles.newButton}>\n                <Container padded row spaceBetween justifyCenter>\n                    <Container>\n                        <Text.Body color=\"white\">NUEVO MODELO</Text.Body>\n                    </Container>\n                    <Container>\n\n                    </Container>\n                </Container>\n            </Container>\n        </Container>\n    )\n}\n\nconst Model = () => {\n    const [models, setModels] = useState({})\n    const navigation = useNavigation()\n\n    useEffect(() => {\n        const db = getDatabase();\n        const path = 'models'\n        const reference = dbRef(db, path);\n        onValue(reference, (snapshot) => {\n            const data = snapshot.val();\n            if (!data) return\n            setModels(data)\n        })\n    }, [])\n\n    const handlePress = (key, model) => () => {\n        navigation.navigate(Screens.ModelNavigator, {\n            screen: Screens.ModelAdd,\n            params: {\n                key,\n                model\n            }\n        })\n    }\n\n    return (\n        <Container>\n            <ClusterModelAdd />\n            <Container>\n                {Object.keys(models).map(key => {\n                    return (\n                        <Container\n                            key={key}\n                            padded\n                            onPress={handlePress(key, models[key])}\n                        >\n                            <Container>\n                                <Text.Body>{key}</Text.Body>\n                            </Container>\n                        </Container>\n                    )\n                })}\n            </Container>\n        </Container>\n    );\n}\n\nexport default Model"]},"metadata":{},"sourceType":"script"}