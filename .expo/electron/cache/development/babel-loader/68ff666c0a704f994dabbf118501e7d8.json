{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStore = exports.getPersistor = void 0;\n\nvar _RootReducer = require(\"redux/RootReducer\");\n\nvar _reduxThunk = _interopRequireDefault(require(\"redux-thunk\"));\n\nvar _reduxReset = _interopRequireDefault(require(\"redux-reset\"));\n\nvar _reduxSaga = _interopRequireDefault(require(\"redux-saga\"));\n\nvar _reduxLogger = require(\"redux-logger\");\n\nvar _redux = require(\"redux\");\n\nvar _remoteReduxDevtools = require(\"remote-redux-devtools\");\n\nvar _reduxPersist = require(\"redux-persist\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _RootSaga = _interopRequireDefault(require(\"./RootSaga\"));\n\nvar persistConfig = {\n  key: 'root',\n  storage: _asyncStorage.default,\n  whitelist: ['session', 'user']\n};\nvar persistedReducer = (0, _reduxPersist.persistReducer)(persistConfig, _RootReducer.RootReducer);\nvar store = null;\nvar saga = (0, _reduxSaga.default)();\n\nvar getStore = function getStore() {\n  if (!store) {\n    var middleware = [_reduxThunk.default, saga];\n    var enhancers = [(0, _reduxReset.default)()];\n\n    if (__DEV__) {\n      middleware.push((0, _reduxLogger.createLogger)({\n        collapsed: true\n      }));\n    }\n\n    var composeEnhancers = (0, _remoteReduxDevtools.composeWithDevTools)({});\n    store = (0, _redux.createStore)(persistedReducer, {}, composeEnhancers.apply(void 0, [_redux.applyMiddleware.apply(void 0, middleware)].concat(enhancers)));\n    saga.run(_RootSaga.default);\n  }\n\n  return store;\n};\n\nexports.getStore = getStore;\n\nvar getPersistor = function getPersistor() {\n  return (0, _reduxPersist.persistStore)(store);\n};\n\nexports.getPersistor = getPersistor;","map":{"version":3,"sources":["/Users/estebanjoaquin/src/examples/pdv-app/redux/Store.js"],"names":["persistConfig","key","storage","whitelist","persistedReducer","persistReducer","store","saga","getStore","middleware","enhancers","createLogger","collapsed","composeEnhancers","composeWithDevTools","createStore","applyMiddleware","getPersistor","persistStore"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,GAAG,EADiB,MAAA;AAEpBC,EAAAA,OAAO,EAFa,qBAAA;AAGpBC,EAAAA,SAAS,EAAE,CAAA,SAAA,EAHb,MAGa;AAHS,CAAtB;AAMA,IAAMC,gBAAgB,GAAGC,kCAAc,aAAdA,EAAzB,wBAAyBA,CAAzB;AACA,IAAIC,KAAK,GAAT,IAAA;AACA,IAAMC,IAAI,GAAV,yBAAA;;AAEO,IAAMC,QAAQ,GAARA,SAAAA,QAAAA,GAAiB;AAC5B,MAAI,CAAJ,KAAA,EAAY;AACV,QAAMC,UAAU,GAAG,CAAA,mBAAA,EAAnB,IAAmB,CAAnB;AACA,QAAMC,SAAS,GAAG,CAAlB,0BAAkB,CAAlB;;AAEA,QAAA,OAAA,EAAa;AACXD,MAAAA,UAAU,CAAVA,IAAAA,CACEE,+BAAa;AACXC,QAAAA,SAAS,EAFbH;AACe,OAAbE,CADFF;AAOF;;AAAA,QAAMI,gBAAgB,GAAGC,8CAAzB,EAAyBA,CAAzB;AAEAR,IAAAA,KAAK,GAAGS,wBAAW,gBAAXA,EAAW,EAAXA,EAGNF,gBAAgB,CAAhBA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAiBG,uBAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAjBH,UAAiBG,CAAjBH,EAAAA,MAAAA,CAHFP,SAGEO,CAAAA,CAHME,CAART;AAKAC,IAAAA,IAAI,CAAJA,GAAAA,CAAAA,iBAAAA;AAGF;;AAAA,SAAA,KAAA;AAvBK,CAAA;;;;AA0BA,IAAMU,YAAY,GAAZA,SAAAA,YAAAA,GAAe;AAAA,SAAMC,gCAAN,KAAMA,CAAN;AAArB,CAAA","sourcesContent":["/* global __DEV__ */\nimport { RootReducer } from 'redux/RootReducer'\nimport thunk from 'redux-thunk'\nimport reduxReset from 'redux-reset'\nimport createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'remote-redux-devtools'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport AsyncStorage from '@react-native-community/async-storage'\nimport RootSaga from './RootSaga'\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['session', 'user'],\n}\n\nconst persistedReducer = persistReducer(persistConfig, RootReducer)\nlet store = null\nconst saga = createSagaMiddleware()\n\nexport const getStore = () => {\n  if (!store) {\n    const middleware = [thunk, saga]\n    const enhancers = [reduxReset()]\n\n    if (__DEV__) {\n      middleware.push(\n        createLogger({\n          collapsed: true,\n        })\n      )\n    }\n\n    const composeEnhancers = composeWithDevTools({})\n\n    store = createStore(\n      persistedReducer,\n      {},\n      composeEnhancers(applyMiddleware(...middleware), ...enhancers)\n    )\n    saga.run(RootSaga)\n  }\n\n  return store\n}\n\nexport const getPersistor = () => persistStore(store)\n"]},"metadata":{},"sourceType":"script"}